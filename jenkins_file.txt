pipeline {
    agent any

    environment {
        // Define environment variables for Docker credentials and image
        DOCKERHUB_CREDENTIALS = credentials('6b3acb82-3f49-4880-8114-a2674ea264c8')
        IMAGE_NAME = 'mca2312/assig9'
    }

    stages {
        stage('Clean Workspace and Clone Repository') {
            steps {
                // Clean workspace and clone the repository
                cleanWs()
                git url: 'https://github.com/Vedhangi/assig9.git', branch: 'main'
            }
        }

        stage('List Files') {
            steps {
                // List files in the workspace
                sh 'ls -la'
            }
        }

        stage('Build Docker Image') {
            steps {
                // Build the Docker image
                sh "docker build -t ${env.IMAGE_NAME} ."
            }
        }

        stage('Login to Docker Hub') {
            steps {
                // Login to Docker Hub using credentials from Jenkins
                script {
                    withCredentials([usernamePassword(credentialsId: '6b3acb82-3f49-4880-8114-a2674ea264c8', 
                      usernameVariable: 'DOCKER_USERNAME', 
                      passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin"
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                // Push the Docker image to Docker Hub
                sh "docker push ${env.IMAGE_NAME}"
            }
        }

        stage('Run Docker Container in Daemon Mode') {
            steps {
                // Run the Docker container in daemon mode
                sh "docker run -d --name my-app-container -p 5000:5000 ${env.IMAGE_NAME}"
            }
        }
    }

    post {
        always {
            // Cleanup Docker images and containers to save space
            sh 'docker stop my-app-container || true'
            sh 'docker rm my-app-container || true'
            sh "docker rmi ${env.IMAGE_NAME} || true"
        }
    }
}
